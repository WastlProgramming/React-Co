useWatch & watch
=====================================

.. note:: Diese Dokumentation behandelt die Funktionen `useWatch` und `watch` in der Bibliothek `react-hook-form`. Beide werden genutzt, um das Verhalten und den Status von Formularfeldern zu beobachten und auf √Ñnderungen zu reagieren. Es wird auch darauf eingegangen, welche Vorteile und Nachteile beide Funktionen bieten.

Einf√ºhrung
----------

Sowohl `useWatch` als auch `watch` sind Methoden, die in der Bibliothek `react-hook-form` verwendet werden, um Formularwerte in Echtzeit zu verfolgen. W√§hrend beide √§hnliche Ziele verfolgen, unterscheiden sie sich in ihrem Anwendungsbereich und der Effizienz bei der Verarbeitung von √Ñnderungen im Formular.

`watch` ‚åö
^^^^^^^^^^^^^^

`watch` wird verwendet, um Formularwerte w√§hrend des Renderings der Komponente zu verfolgen. Es wird direkt in der Komponente aufgerufen und kann sowohl einzelne Felder als auch das gesamte Formular beobachten.

`useWatch` üì∫
^^^^^^^^^^^^^^^^

`useWatch` ist ein Hook, der ebenfalls zur Beobachtung von Formularwerten dient. Der entscheidende Unterschied zu `watch` besteht darin, dass `useWatch` den Vorteil bietet, das Neurendern der Komponente zu vermeiden, wenn sich ein Formularwert √§ndert. Dies kann die Leistung erheblich verbessern, wenn nur bestimmte Teile eines Formulars √ºberwacht werden m√ºssen.

Verwendungszweck von `watch`
----------------------------

Du kannst `watch` verwenden, wenn du:

- Den Wert eines Formularfeldes oder aller Felder in Echtzeit abrufen m√∂chtest.
- Schnell und unkompliziert auf Formularwerte zugreifen willst, ohne zus√§tzliche Performance-Optimierungen zu ben√∂tigen.

Syntax ‚ö°
---------

Die allgemeine Verwendung von `watch` sieht wie folgt aus:

.. code-block:: react

    const value = watch("fieldName");       // Beobachte ein bestimmtes Feld
    const values = watch();                 // Beobachte das gesamte Formular
    const defaultValues = watch(["field1", "field2"]); // Beobachte mehrere Felder

Beispiele f√ºr `watch` üé≤
------------------------

Beispiel 1: Beobachten eines einzelnen Feldes mit `watch`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: react

    import React from 'react';
    import { useForm } from 'react-hook-form';

    function MyForm() {
      const { register, watch } = useForm();
      const firstName = watch("firstName", "");

      return (
        <form>
          <input {...register("firstName")} placeholder="Vorname" />
          <p>Beobachteter Wert: {firstName}</p>
        </form>
      );
    }

In diesem Beispiel wird das Feld `firstName` mit `watch` √ºberwacht, und der Wert wird bei jeder √Ñnderung direkt neu gerendert.

Beispiel 2: Beobachten mehrerer Felder mit `watch`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: react

    import React from 'react';
    import { useForm } from 'react-hook-form';

    function MyForm() {
      const { register, watch } = useForm();
      const [firstName, lastName] = watch(["firstName", "lastName"]);

      return (
        <form>
          <input {...register("firstName")} placeholder="Vorname" />
          <input {...register("lastName")} placeholder="Nachname" />
          <p>Vorname: {firstName}</p>
          <p>Nachname: {lastName}</p>
        </form>
      );
    }

In diesem Beispiel werden die Felder `firstName` und `lastName` gleichzeitig √ºberwacht und bei jeder √Ñnderung neu gerendert.

Vor- und Nachteile von `watch` üëç /üëé
-----------------------------------------------

.. list-table:: 
   :widths: 20 80
   :header-rows: 1

   * - Vorteil
     - Nachteil
   * - Einfach zu verwenden f√ºr das Abrufen von Werten w√§hrend des Renderings
     - F√ºhrt zu Neurenderings bei jeder Formularwert-√Ñnderung, was die Performance beeintr√§chtigen kann
   * - Gut geeignet f√ºr kleinere Formulare, bei denen Performance kein kritischer Faktor ist
     - Beobachtet immer alle Formular√§nderungen und verursacht damit unn√∂tige Re-Renderings
   * - Ideal f√ºr schnelles Prototyping oder wenn es nicht notwendig ist, die Performance zu optimieren
     - Keine M√∂glichkeit zur Vermeidung unn√∂tiger Neurenderings

Verwendungszweck von `useWatch` üî®
-----------------------------------

`useWatch` solltest du verwenden, wenn du:

- Den Zustand eines oder mehrerer Formularfelder beobachten m√∂chtest, ohne dass das gesamte Formular bei jeder √Ñnderung neu gerendert wird.
- Performance-Optimierungen suchst, insbesondere bei gro√üen Formularen mit vielen Feldern.
- Nur bestimmte Felder √ºberwachen m√∂chtest, ohne dass die gesamte Komponente neu gerendert wird.

Syntax von `useWatch` ‚ö°
--------------------------

Die Verwendung von `useWatch` sieht √§hnlich aus wie bei `watch`, jedoch musst du das `control`-Objekt aus `useForm` √ºbergeben:

.. code-block:: react

    const watchedValue = useWatch({
      control,        // Pflichtparameter: das Kontrollobjekt des Formulars
      name,           // Optional: der Name des zu beobachtenden Feldes
      defaultValue    // Optional: ein Standardwert, falls das Feld keinen Wert hat
    });

Beispiele f√ºr `useWatch` üé≤
----------------------------

Beispiel 1: Beobachten eines einzelnen Feldes mit `useWatch`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: react

    import React from 'react';
    import { useForm, useWatch } from 'react-hook-form';

    function MyForm() {
      const { control, register } = useForm();
      const firstName = useWatch({ control, name: "firstName", defaultValue: "" });

      return (
        <form>
          <input {...register("firstName")} placeholder="Vorname" />
          <p>Beobachteter Wert: {firstName}</p>
        </form>
      );
    }

Hier wird das Feld `firstName` mit `useWatch` √ºberwacht, und der Wert wird in Echtzeit aktualisiert, ohne dass das Formular neu gerendert wird.

Beispiel 2: Beobachten mehrerer Felder mit `useWatch`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: react

    import React from 'react';
    import { useForm, useWatch } from 'react-hook-form';

    function MyForm() {
      const { control, register } = useForm();
      const [firstName, lastName] = useWatch({
        control,
        name: ["firstName", "lastName"],
        defaultValue: ["", ""]
      });

      return (
        <form>
          <input {...register("firstName")} placeholder="Vorname" />
          <input {...register("lastName")} placeholder="Nachname" />
          <p>Vorname: {firstName}</p>
          <p>Nachname: {lastName}</p>
        </form>
      );
    }

Mit `useWatch` kannst du mehrere Felder effizient √ºberwachen, ohne unn√∂tige Neurenderings.

Vor- und Nachteile von `useWatch` üëç / üëé
-------------------------------------------------

.. list-table:: 
   :widths: 20 80
   :header-rows: 1

   * - Vorteil
     - Nachteil
   * - Verhindert unn√∂tige Neurenderings und verbessert die Performance
     - Etwas komplizierter in der Einrichtung, da `control`-Objekt ben√∂tigt wird
   * - Ideal f√ºr gro√üe Formulare oder Formulare mit vielen Feldern
     - Nicht so einfach und schnell einzusetzen wie `watch`
   * - Erm√∂glicht selektives Beobachten von Feldern oder des gesamten Formulars
     - Muss explizit konfiguriert werden, was f√ºr kleine Formulare unn√∂tig sein k√∂nnte

Fazit
-----

- **`watch`** ist ideal f√ºr kleine und unkomplizierte Formulare, bei denen Performance nicht im Vordergrund steht und du nur schnell auf Formularwerte zugreifen m√∂chtest.
- **`useWatch`** hingegen bietet eine effizientere L√∂sung f√ºr gr√∂√üere Formulare, bei denen unn√∂tige Neurenderings vermieden werden sollen. Es ist besonders n√ºtzlich, wenn nur bestimmte Felder beobachtet werden sollen, w√§hrend der Rest des Formulars unber√ºhrt bleibt.

.. tip::
   Verwende `watch` f√ºr schnelle Prototypen oder wenn Neurenderings kein Problem darstellen. Verwende hingegen `useWatch`, wenn du die Performance optimieren und unn√∂tige Renderings vermeiden m√∂chtest.



Kurzes Beispiel als Unterschied 
---------------------------------------------------


- watch will render the root level
- useWatch will render at the hook/component level

<A>
  <B>
    <C>
       <D /> // Input change here
    </C>
  </B>
  <E /> // i only want to re-render the update here.
</A>