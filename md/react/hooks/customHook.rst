Custom Hooks 
=====================

Einleitung ü™ú
-------------------------------

**Custom Hooks** sind eine m√§chtige Funktionalit√§t in React, die es uns erm√∂glicht, wiederverwendbare Logik aus Komponenten zu extrahieren und in eigene Hooks zu kapseln. Sie bieten eine saubere und modulare Art, um Code zu organisieren, der sich mehrfach verwenden l√§sst.

In diesem Abschnitt gehen wir darauf ein, wie Custom Hooks funktionieren, wann sie sinnvoll sind, wie man sie implementiert und welche Vor- und Nachteile sie mit sich bringen.

Was sind Custom Hooks? ü™ù
---------------------------------

Custom Hooks sind einfach JavaScript-Funktionen, die React-Hooks wie `useState`, `useEffect` oder andere Standard-Hooks nutzen k√∂nnen. Sie erm√∂glichen es, Logik, die in mehreren Komponenten ben√∂tigt wird, in einer wiederverwendbaren Form auszulagern.

Ein Custom Hook ist im Grunde eine Funktion, deren Name mit **"use"** beginnt (z.B. `useFetch`, `useLocalStorage`), und die andere Hooks innerhalb ihrer Definition verwendet.

.. code-block:: react

   // Beispiel eines Custom Hooks zur Nutzung der LocalStorage API
   import { useState } from 'react';

   function useLocalStorage(key, initialValue) {
       const [storedValue, setStoredValue] = useState(() => {
           try {
               const item = window.localStorage.getItem(key);
               return item ? JSON.parse(item) : initialValue;
           } catch (error) {
               console.log(error);
               return initialValue;
           }
       });

       const setValue = (value) => {
           try {
               const valueToStore =
                   value instanceof Function ? value(storedValue) : value;
               setStoredValue(valueToStore);
               window.localStorage.setItem(key, JSON.stringify(valueToStore));
           } catch (error) {
               console.log(error);
           }
       };

       return [storedValue, setValue];
   }

Wann sind Custom Hooks sinnvoll? ‚åö
-------------------------------------------

Custom Hooks sind besonders n√ºtzlich in folgenden Szenarien:

1. **Wiederverwendbare Logik**:
   Wenn eine Logik in mehreren Komponenten verwendet wird (z.B. Fetching von Daten, Authentifizierung, Formularverwaltung), sollten Custom Hooks in Betracht gezogen werden, um diese Logik einmal zu schreiben und mehrfach zu verwenden.

2. **Organisation und Code-Struktur**:
   Sie helfen dabei, den Komponenten-Code zu entlasten und sauberer zu gestalten. Indem man h√§ufig verwendete Logik in einen Hook auslagert, bleiben Komponenten fokussiert auf die UI und die Darstellung.

3. **Trennung von Logik und Pr√§sentation**:
   Custom Hooks erm√∂glichen die Trennung von Anwendungslogik und UI. Dies f√∂rdert die Modularit√§t und Wartbarkeit des Codes.

4. **Stateful Logik teilen**:
   Da Hooks in React das Teilen von zustandsbehafteter Logik (Stateful Logic) erm√∂glichen, kann dieselbe Logik von verschiedenen Komponenten unabh√§ngig voneinander verwendet werden, ohne duplizierten Code zu erzeugen.

Vorteile von Custom Hooks üéÅ
-----------------------------------

1. **Wiederverwendbarkeit**:
   - Custom Hooks erlauben es, √§hnliche Logik zwischen Komponenten zu teilen, ohne den Code zu duplizieren.

2. **Lesbarkeit und Wartbarkeit**:
   - Sie machen Komponenten sauberer und sorgen daf√ºr, dass sie sich auf die Darstellung konzentrieren, w√§hrend sich der Hook um die Logik k√ºmmert.

3. **Modularit√§t**:
   - Die Trennung von UI-Logik und Anwendungslogik erleichtert die Wartung, das Testen und die Erweiterung des Codes.

4. **Isolation von Logik**:
   - Custom Hooks k√∂nnen komplexe Logik isolieren und kapseln, was den Test und die Fehlersuche erleichtert.

Nachteile von Custom Hooks üí£
---------------------------------------

1. **√úberm√§√üige Abstraktion**:
   - Wenn zu viele Custom Hooks verwendet werden oder sie zu spezifisch gestaltet sind, kann dies den Code schwerer nachvollziehbar machen.

2. **Fehleranf√§lligkeit bei Zust√§nden**:
   - Da Hooks auf der React-Hook-Reihenfolge basieren, k√∂nnen Fehler auftreten, wenn Custom Hooks falsch oder in ung√ºltigen Kontexten verwendet werden.

3. **Unn√∂tige Komplexit√§t**:
   - Bei einfachen Komponenten kann die Verwendung von Custom Hooks √ºberfl√ºssig oder unn√∂tig kompliziert sein. Es sollte darauf geachtet werden, dass nur dort Custom Hooks genutzt werden, wo dies wirklich sinnvoll ist.

Wie erstellt man Custom Hooks? üî®
----------------------------------------

Die Erstellung eines Custom Hooks ist einfach. Hier sind die Schritte:

1. **Erstelle eine Funktion**:
   Ein Custom Hook ist eine normale JavaScript-Funktion, die `use` am Anfang ihres Namens tr√§gt. Dadurch erkennt React, dass es sich um einen Hook handelt.

2. **Verwende andere Hooks**:
   Innerhalb des Custom Hooks kannst du auf andere Hooks zugreifen, wie z.B. `useState`, `useEffect`, `useContext`, etc.

3. **Exportiere den Hook**:
   Damit der Custom Hook in anderen Teilen der Anwendung verwendet werden kann, musst du ihn exportieren.

Beispiel f√ºr einen einfachen Custom Hook, der den Status von Online/Offline-Events verwaltet:

.. code-block:: react

   import { useState, useEffect } from 'react';

   function useOnlineStatus() {
       const [isOnline, setIsOnline] = useState(navigator.onLine);

       useEffect(() => {
           function handleStatusChange() {
               setIsOnline(navigator.onLine);
           }

           window.addEventListener('online', handleStatusChange);
           window.addEventListener('offline', handleStatusChange);

           return () => {
               window.removeEventListener('online', handleStatusChange);
               window.removeEventListener('offline', handleStatusChange);
           };
       }, []);

       return isOnline;
   }

   export default useOnlineStatus;

Wie exportiere ich Custom Hooks? üß™
------------------------------------------------

Ein Custom Hook wird exportiert, wie jede andere Funktion in JavaScript. Es gibt zwei M√∂glichkeiten, ihn zu exportieren:

1. **Named Export**:
   Bei einem Named Export kann der Hook mit einem spezifischen Namen importiert werden.

   .. code-block:: react

      export function useCustomHook() {
          // Logik des Hooks
      }

      // Import
      import { useCustomHook } from './customHook';

2. **Default Export**:
   Ein Default Export erlaubt es, den Hook beim Import umzubenennen.

   .. code-block:: react 

      export default function useCustomHook() {
          // Logik des Hooks
      }

      // Import
      import useHookAlias from './customHook';

Erweiterung: Custom Hook f√ºr eine Berechnung ‚è©
-----------------------------------------------------------

Im folgenden Beispiel erweitern wir das Konzept eines Custom Hooks, um eine einfache Berechnung durchzuf√ºhren: Der Hook akzeptiert zwei Zahlen als Parameter und gibt deren Summe zur√ºck.

.. code-block:: react

   import { useState } from 'react';

   // Custom Hook f√ºr eine Berechnung der Summe von zwei Zahlen
   function useSum(a, b) {
       const [sum, setSum] = useState(0);

       useState(() => {
           setSum(a + b);
       }, [a, b]); // useEffect wird aufgerufen, wenn sich a oder b √§ndern

       return sum;
   }

   export default useSum;

Dieser Hook `useSum` wird so verwendet, dass er zwei Zahlen entgegennimmt, ihre Summe berechnet und diese als R√ºckgabewert bereitstellt.

Verwendung des Hooks in einer Komponente:

.. code-block:: react

   import React from 'react';
   import useSum from './useSum';

   const SumComponent = () => {
       const a = 5;
       const b = 10;
       const result = useSum(a, b);

       return (
           <div>
               <p>Die Summe von {a} und {b} ist: {result}</p>
           </div>
       );
   }

   export default SumComponent;

Fazit ü§ì
--------------

Custom Hooks bieten eine flexible M√∂glichkeit, wiederverwendbare und zustandsbasierte Logik in React-Anwendungen zu teilen und zu organisieren. Sie f√∂rdern die Modularit√§t und verbessern die Lesbarkeit des Codes. In diesem Beispiel haben wir einen Custom Hook erstellt, der zwei Zahlen entgegennimmt und deren Summe berechnet. Dies veranschaulicht, wie man Logik innerhalb eines Hooks wiederverwendbar macht.

.. note:: 
   Nutze Custom Hooks immer dann, wenn du Logik hast, die in mehreren Komponenten verwendet wird. Halte sie einfach und fokussiere dich auf spezifische Anwendungsf√§lle, um den Code sauber und verst√§ndlich zu halten.
